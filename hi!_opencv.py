# -*- coding: utf-8 -*-
"""HI! OpenCV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nRX14h2i4LwCkcMy9E-_Z10G3sc3CvAI
"""

print("HI! OpenCV")

import cv2

import cv2
import matplotlib.pyplot as plt
import numpy as np

# 使用 cv2.imread 讀取圖片，注意這裡的檔案路徑
# 在 Colab 中，通常直接用檔名即可
img = cv2.imread('1.jpg')

# 由於 Colab 顯示圖片時會預設使用 Matplotlib，而 Matplotlib 預設是 RGB 順序
# 但 OpenCV 讀取圖片是 BGR 順序，為了正確顯示，需要將其轉換
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# 將圖片轉換為灰階
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# 使用 Matplotlib 顯示圖片
plt.figure(figsize=(10, 5))

# 顯示原始圖片
plt.subplot(1, 2, 1)
plt.imshow(img_rgb)
plt.title('Original Image')
plt.axis('off') # 隱藏座標軸

# 顯示灰階圖片
plt.subplot(1, 2, 2)
plt.imshow(gray_img, cmap='gray')
plt.title('Grayscale Image')
plt.axis('off') # 隱藏座標軸

plt.show()

# 如果想將灰階圖片儲存起來，可以取消註解下面這行
# cv2.imwrite('gray_image.jpg', gray_img)

import matplotlib.pyplot as plt
import numpy as np
from PIL import Image

# 1. Pillow 讀取圖片
img = Image.open('1.jpg')

# 2. 轉為 NumPy 陣列
img_array = np.array(img)

# 3. NumPy 分離通道
red_channel_img = img_array.copy()
red_channel_img[:, :, 1] = 0  # G=0
red_channel_img[:, :, 2] = 0  # B=0

green_channel_img = img_array.copy()
green_channel_img[:, :, 0] = 0  # R=0
green_channel_img[:, :, 2] = 0  # B=0

blue_channel_img = img_array.copy()
blue_channel_img[:, :, 0] = 0  # R=0
blue_channel_img[:, :, 1] = 0  # G=0

# 4. Matplotlib 顯示
plt.figure(figsize=(20, 5)) # 設定圖片大小

plt.subplot(1, 4, 1) # 指定下一個圖形要放在網格的哪個位置。
plt.imshow(img)
plt.title("Original Image")
plt.axis('on') # 顯示座標軸

plt.subplot(1, 4, 2)
plt.imshow(red_channel_img)
plt.title("Red Channel")
plt.axis('off') # 關閉顯示座標軸

plt.subplot(1, 4, 3)
plt.imshow(green_channel_img)
plt.title("Green Channel")
plt.axis('off')

plt.subplot(1, 4, 4)
plt.imshow(blue_channel_img)
plt.title("Blue Channel")
plt.axis('off')

plt.show()

import matplotlib.pyplot as plt
import numpy as np
from PIL import Image

def redChannel(ImamgeName) :
  # 1. Pillow 讀取圖片
  img = Image.open('1.jpg')

  # 2. 轉為 NumPy 陣列
  img_array = np.array(img)

  # 3. NumPy 分離通道
  red_channel_img = img_array.copy()
  red_channel_img[:, :, 1] = 0  # G=0
  red_channel_img[:, :, 2] = 0  # B=0

  plt.imshow(red_channel_img)
  plt.axis('off')
  plt.show()

def greenChannel(ImamgeName) :
  # 1. Pillow 讀取圖片
  img = Image.open('1.jpg')

  # 2. 轉為 NumPy 陣列
  img_array = np.array(img)

  # 3. NumPy 分離通道
  green_channel_img = img_array.copy()
  green_channel_img[:, :, 0] = 0  # G=0
  green_channel_img[:, :, 2] = 0  # B=0

  plt.imshow(green_channel_img)
  plt.axis('off')
  plt.show()

def blueChannel(ImamgeName) :
  # 1. Pillow 讀取圖片
  img = Image.open('1.jpg')

  # 2. 轉為 NumPy 陣列
  img_array = np.array(img)

  # 3. NumPy 分離通道
  blue_channel_img = img_array.copy()
  blue_channel_img[:, :, 0] = 0  # R=0
  blue_channel_img[:, :, 1] = 0  # G=0

  plt.imshow(blue_channel_img)
  plt.axis('off')
  plt.show()

redChannel('1.jpg')
greenChannel('1.jpg')
blueChannel('1.jpg')

import cv2
import matplotlib.pyplot as plt
import numpy as np

# 製作fuctions
def grayImage(ImamgeName) :

  # 先用if判斷cv2.imread讀不讀到照片
  if cv2.imread('3.jpg') is None:
    print("圖片錯誤")

  # 沒錯就接續著用
  else :

    #設定 img 為想要讀取的照片
    img = cv2.imread('3.jpg',)

    #轉灰階
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    #用 plt 顯示圖片
    plt.imshow(gray_img, cmap='gray')
    plt.axis('off')
    plt.show()

    #儲存照片
    cv2.imwrite('灰色的黑鬼.jpg', gray_img)

#顯示灰階照片
grayImage('3.jpg')

def maxium(value1, value2, vaalue3):
    """Return the maxium of three values"""
    max_value = value1
    if value2 > max_value:
        max_value = value2
    if vaalue3 > max_value:
        max_value = vaalue3
    return max_value

maxValue = maxium(9, 22,35)
print (maxValue)

def minium(value1, value2, value3, value4):
    """Return the minium of four values"""
    min_value = value1
    if value2 < min_value:
        min_value = value2
    if value3 < min_value:
        min_value = value3
    if value4 < min_value:
        min_value = value4
    return min_value

minValue = minium(10, 5, 2,1)
print(minValue)